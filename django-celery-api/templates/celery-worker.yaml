apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.celery.worker.name }}-deployment"
  namespace: "{{ .Values.celery.worker.namespace }}"
  labels:
    app: "{{ .Values.celery.worker.name }}"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "{{ .Values.celery.worker.name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.celery.worker.name }}"
    spec:
      volumes:
        - name: celery-logs
          hostPath:
            path: /var/logs/celery-worker/
      terminationGracePeriodSeconds: 3600
      containers:
        - name: celery-worker-docker-image
          image: "{{ .Values.celery.worker.image.repository }}:{{ .Values.celery.worker.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: celery-logs
              mountPath: /logs/
          {{- with .Values.celery.worker.resources }}
            resources:
              {{- toYaml . | nindent 6 }}
          {{- end }}
          readinessProbe:
            exec:
              command: ["python", "./django/django_project/celery_readiness.py"]
            initialDelaySeconds: 120
            periodSeconds: 60
          livenessProbe:
            exec:
              command:
                ["python", "./django/django_project/celery_worker_liveness.py"]
            initialDelaySeconds: 120
            periodSeconds: 60
          env:
            {{- include ".Values.celery.worker.env" . | nindent 6 }}
            - name: CELERY_BROKER_URL
              valueFrom:
                secretKeyRef:
                  name: app-auth
                  key: celery_broker_url
                  optional: false
            
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: "{{ .Values.celery.worker.name }}-scaledobject"
  namespace: default
spec:
  scaleTargetRef:
    kind: Deployment
    name: "{{ .Values.celery.worker.name }}-deployment"
  pollingInterval: 15
  cooldownPeriod: 200
  maxReplicaCount: {{ .Values.celery.worker.autoscaling.minScale }}
  minReplicaCount: {{ .Values.celery.worker.autoscaling.maxScale }}
  triggers:
    - type: rabbitmq
      metadata:
        hostFromEnv: CELERY_BROKER_URL
        queueName: "{{ .Values.celery.worker.autoscaling.queueName }}"
        mode: QueueLength
        value: "{{ .Values.celery.worker.autoscaling.queueLengthTarget }}"
