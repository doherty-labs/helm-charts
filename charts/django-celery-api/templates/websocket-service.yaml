apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.service.name }}-websocket-deployment"
  namespace: "{{ .Values.service.namespace }}"
  labels:
    app: "{{ .Values.service.name }}-websocket-app"
spec:
  progressDeadlineSeconds: 1800
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: "{{ .Values.service.name }}-websocket-app"
  template:
    metadata:
      labels:
        app: "{{ .Values.service.name }}-websocket-app"
    spec:
      volumes:
        - name: websocket-service-logs
          hostPath:
            path: /var/logs/websocket-service/
        - name: secret-volume
          secret:
            secretName: django-rest-api
      containers:
        - name: "{{ .Values.service.name }}-websocket-docker-image"
          image: "{{ .Values.service.image.repository }}:{{ .Values.service.image.tag }}"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: websocket-service-logs
              mountPath: /logs/
            - name: secret-volume
              readOnly: true
              mountPath: "/etc/secret-volume"
          ports:
            - containerPort: {{ .Values.service.port }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 30
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 30
          {{- with .Values.service.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.service.env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
            - name: ASYNC_MODE
              value: "True"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.service.name }}-websocket-load-balancer"
  annotations:
    haproxy.org/pod-maxconn: "{{ .Values.service.autoscaling.concurrencyPerPod }}"
spec:
  selector:
    app: "{{ .Values.service.name }}-websocket-app"
  ports:
    - port: 80
      name: http
      targetPort: {{ .Values.service.port }}
    - port: 443
      name: https
      targetPort: {{ .Values.service.port }}
  type: ClusterIP

---

apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
 name: "{{ .Values.service.name }}-websocket-scaled-object"
spec:
 scaleTargetRef:
   kind: Deployment
   name: "{{ .Values.service.name }}-websocket-deployment"
 pollingInterval: 20                       
 minReplicaCount: {{ .Values.service.autoscaling.minScale }}                
 maxReplicaCount: {{ .Values.service.autoscaling.maxScale }}           
 advanced:                                 
   restoreToOriginalReplicaCount: false    
   horizontalPodAutoscalerConfig:          
     behavior:                             
       scaleDown:
         stabilizationWindowSeconds: 300
         policies:
         - type: Percent
           value: 25
           periodSeconds: 60
 triggers:
 - type: prometheus
   metadata:
     serverAddress: http://prometheus-server.default.svc.cluster.local
     metricName: haproxy_backend_current_queue
     query: sum(avg_over_time(haproxy_backend_current_queue{proxy="{{ .Values.service.namespace }}-{{ .Values.service.name }}-websocket-load-balancer-http"}[30s]))
     threshold: '10'